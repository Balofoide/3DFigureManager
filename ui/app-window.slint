import { Button, VerticalBox, TextEdit, LineEdit, HorizontalBox, GridBox, SpinBox, ComboBox } from "std-widgets.slint";

 export struct Database{
    nome:string,
    endereco:string,
    entrega:string,
 }

 export struct Impressoras{
    modelo:string,
    watts:string,
 }
 

export component Container {
    in property <color> cor;
    Rectangle {
        background: cor;
        border-radius: 20px;
        @children
    }
}

export component InputField {
    width: 300px;
    height: 60px;
    in property <string> text;
    in-out property <string> input;
    HorizontalBox {
        Text {
            horizontal-alignment: left;
            vertical-alignment: center;
            text: text;
        }
        LineEdit {
            horizontal-alignment: left;
            min-width: 100px;
            min-height: 20px;
            text: root.input;
            changed text => {root.input = self.text;}
        }
    }
}

export component SideButton {
    in property <string> texto;
    callback clicked;
    width: 100px;
    height: 40px;
    Rectangle {
        background: white;
        border-radius: 10px;
        drop-shadow-offset-y: 5px;
        drop-shadow-color: black;
        drop-shadow-blur: 10px;
        Text {
            text: root.texto;
            color: black;
            horizontal-alignment: center;
            vertical-alignment: center;
        }
        TouchArea {
            clicked => {root.clicked();}
        }
    }
}

export component AppWindow inherits Window {
    in-out property <string> filamento;
    in-out property <string> material;
    in-out property <string> tempo;
   
    in-out property <string> energia;
    in-out property <string> lucro;
    in-out property <float> total;

    in-out property <string> nome_cliente;
    in-out property <string> endereco;
    in-out property <string> entrega;

    
    
    in-out property <string> input_modelo;
    in-out property <string> input_watts;

     


    in-out property <[Impressoras]> impressoras;

    in-out property <[string]> impressoras_string;

    in-out property <[Database]> clients_database;

    in-out property <string> combobox_selected;

    callback calcular_preco();
    callback registrar-cliente();
    callback registrar-impressora();
 

    

    height: 720px;
    width: 1250px;

    HorizontalLayout {
        Rectangle {
            background: lightgrey;
            HorizontalBox {
                VerticalBox {
                    Rectangle {
                        width: 2%;
                        background: lightsalmon;
                        border-radius: 20px;
                        VerticalBox {
                            alignment: center;
                            SideButton {
                                texto: "Tela 1";
                                clicked => {
                                    Tela1.visible = true;
                                    Tela2.visible = false;
                                    Tela3.visible = false;
                                    Tela4.visible = false;
                                }
                            }
                            SideButton {
                                texto: "Tela 2";
                                clicked => {
                                    Tela1.visible = false;
                                    Tela2.visible = true;
                                    Tela3.visible = false;
                                    Tela4.visible = false;
                                }
                            }
                            SideButton {
                                texto: "Tela 3";
                                clicked => {
                                    Tela1.visible = false;
                                    Tela2.visible = false;
                                    Tela3.visible = true;
                                    Tela4.visible = false;
                                }
                            }
                            SideButton {
                                texto: "Tela 4";
                                clicked => {
                                    Tela1.visible = false;
                                    Tela2.visible = false;
                                    Tela3.visible = false;
                                    Tela4.visible = true;
                                }
                            }
                        }
                    }
                }
                Rectangle {
                    Tela1 := Rectangle {
                        visible: false;
                        background: lightpink;
                        VerticalBox {
                            alignment: center;
                            Container {
                                width: 800px;
                                cor: black;
                                VerticalBox {
                                    alignment: center;
                                    InputField { text: "Preço do filamento [R$]:"; input: root.filamento;   changed input => {root.filamento = self.input;}}
                                    InputField { text: "Gasto de Material [g]:"; input: root.material;      changed input => {root.material = self.input;}}
                                    InputField { text: "Tempo [H]:"; input: root.tempo;                     changed input => {root.tempo = self.input;}}
                                    // InputField { text: "Watts [W]"; input: root.watts;                      changed input => {root.watts = self.input;}}
                                   HorizontalBox {
                                    alignment: start;
                                    Text {
                                        text: "Impressora";
                                    }
                                    ComboBox {
                                        model: impressoras_string;
                                         
                                         selected(current-value) => {
                                            debug("Valor da combobox: ", current-value);
                                            combobox_selected = current-value;
                                         }       
                                    }
                                   } 
                                    InputField { text: "Taxa de Energia [R$]:"; input: root.energia;        changed input => {root.energia = self.input;}}
                                    InputField { text: "Lucro [%]:"; input: root.lucro;                     changed input => {root.lucro = self.input;}}
                                    Text { text: "Total: \{root.total}"; }
                                    Button {
                                        width: 100px;
                                        text: "Calcular";
                                        clicked => {root.calcular_preco();}
                                    }
                                }
                            }
                        }
                    }
                    Tela2 := Rectangle {
                        visible: false;
                        background: blue;
                        VerticalBox {
                            alignment: center;
                            Container {
                                cor: black;
                                VerticalBox {
                                    alignment: center;
                                    InputField { text: "Nome Cliente"; input: root.nome_cliente;    changed input => {root.nome_cliente = self.input;}}
                                    InputField { text: "Endereço"; input: root.endereco;            changed input => {root.endereco = self.input;}}
                                    InputField { text: "Data Entrega"; input: root.entrega;         changed input => {root.entrega = self.input;}}
                                    Button {
                                        width: 100px;
                                        text: "Salvar";
                                        clicked => {
                                            root.registrar-cliente();
 
                                            debug("Nome cliente: ", root.nome_cliente, "Endereço:", root.endereco, "Entrega:", root.entrega);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    Tela3 := Rectangle {
                        visible: false;
                        background: green;
                        VerticalBox {
                            alignment: center;
                            Container {
                                cor: black;
                                VerticalBox {
                                    alignment: center;
                                
                                   VerticalBox {
                                    HorizontalBox {
                                        // alignment: center;
                                        Text {text: "=Nome="; horizontal-alignment: left;}
                                        Text {text: "=Endereço="; horizontal-alignment:  left;}
                                        Text {text: "=Entrega="; horizontal-alignment: left;}
                                    }
                                      for client[index] in root.clients_database: HorizontalBox {
                                        // alignment: center;
                                            Text{ text: client.nome; horizontal-alignment: left;   color: white; }
                                            Text{ text: client.endereco; horizontal-alignment: left; color: white; }
                                            Text{ text: client.entrega; horizontal-alignment: left;   color: white;}
                                        }
                                   }


                                }
                            }
                        }
                    }
                    Tela4 := Rectangle {
                        visible: false;
                        
                        background: gray;
                        VerticalLayout {
                           
                            Container {
                                cor: white;
                                
                                GridBox {
                                    
                                   Row{
                                    Container {
                                        cor:black;
                                        VerticalBox {
                                            InputField { text: "Modelo"; input: root.input_modelo;    changed input => {root.input_modelo = self.input;}}

                                            InputField { text: "Watts"; input: root.input_watts;    changed input => {root.input_watts = self.input;}}
 
                                            Button {
                                                text: "Salvar";
                                                clicked => {
                                                    root.registrar-impressora();

                                                    debug("Nome Modelo:",root.input_modelo, "Watts:",root.input_watts);
                                                }
                                            } 
                                        }
                                         
                                        Container {
                                            cor:black;
                                            VerticalBox {
                                            
                                                
                                            }
                                            
                                        }
                                         
                                       }
                                    }
                                   
                                   }
                                    
                               
                            }
                        }
                    }
                    Tela5 := Rectangle{
                        visible: true;
                        Container {cor: black;
                            width: 90%;
                            height: 90%;
                            

                        
                        }

                    }
                    

                }
            }
        }
    }
}

